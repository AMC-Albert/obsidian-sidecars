import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		// Add node built-ins with the node: prefix
		"node:fs/promises",
		"node:stream",
		"node:path",
		"node:fs",
		"node:events",
		"node:util",
		"node:os",
		"node:assert",
		"node:buffer",
		"node:child_process",
		"node:constants",
		"node:crypto",
		"node:dns",
		"node:domain",
		"node:http",
		"node:https",
		"node:net",
		"node:querystring",
		"node:readline",
		"node:repl",
		"node:string_decoder",
		"node:sys",
		"node:timers",
		"node:tls",
		"node:tty",
		"node:url",
		"node:v8",
		"node:vm",
		"node:zlib",
		...builtins
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
